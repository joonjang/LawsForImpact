using System;
using System.Collections.Generic;
using System.Linq;
using LawsForImpact.Models;
using LawsForImpact.Services;
using SQLite;
using Xamarin.Forms;

namespace LawsForImpact.ViewModels
{
    public class ItemDetailViewModel : BaseViewModel
    {
        private SQLiteConnection _sqLiteConnection;
        INotificationManager notificationManager;
        string tableSwitch;
        int indexTable = -1;
        bool fromNotification = false;
        public ItemDetailViewModel()
        {
            Title = "Summary";


            notificationManager = DependencyService.Get<INotificationManager>();
            notificationManager.NotificationReceived += (sender, eventArgs) =>
            {
                var evtData = (NotificationEventArgs)eventArgs;
                ShowNotification(evtData.Table, evtData.Index);
            };
        }

        void ShowNotification(string table, int index)
        {
            Device.BeginInvokeOnMainThread(() =>
            {
                tableSwitch = table;
                indexTable = index;
                fromNotification = true;
                LoadData();
                
            });
        }


        private string headerTitle;
        public string HeaderTitle
        {
            get { return headerTitle; }
            set
            {
                headerTitle = value;
                OnPropertyChanged(nameof(HeaderTitle));
            }
        }
        private string headerDescription;
        public string HeaderDescription
        {
            get { return headerDescription; }
            set
            {
                headerDescription = value;
                OnPropertyChanged(nameof(HeaderDescription));
            }
        }
        private string lawOrPrinciple;
        public string LawOrPrinciple
        {
            get { return lawOrPrinciple; }
            set
            {
                if (boldHeaderTitle != "User")
                {
                    lawOrPrinciple = boldHeaderTitle + ": " + FindLawOrPrinciple() + " " + value;
                }
                else
                {
                    lawOrPrinciple = "";
                }
                OnPropertyChanged(nameof(LawOrPrinciple));
            }
        }



        private string FindLawOrPrinciple()
        {
            string tmp = "";
            switch (boldHeaderTitle)
            {
                case "Power":
                case "War":
                case "Human":
                    tmp = "Law";
                    break;
                case "Mastery":
                    tmp = "Principle";
                    break;
                case "User":
                case "Friends":
                    tmp = "Rule";
                    break;
            }

            return tmp;
        }
        //  = Global.notifCurrentTitle
        string boldHeaderTitle;

        public async void LoadData()
        {

            try
            {
                _sqLiteConnection = await Xamarin.Forms.DependencyService.Get<ISQLite>().GetConnection();
                IEnumerable<IDataTable> tableToEnumerable = new List<IDataTable>();
                List<IDataTable> listData;
                Random rand = new Random();
                int randLawIndex;
                List<string> listOfOption = new List<string>() { "Power", "Mastery", "War", "Friends", "Human" };
                if (_sqLiteConnection.Table<User>().Count() > 1)
                {
                    listOfOption.Add("User");
                }

                // if not tapped from notification
                if (!fromNotification)
                {
                    // random number out of current selection
                    indexTable = rand.Next(listOfOption.Count);

                    // random table from random number generated by indexTable
                    tableSwitch = listOfOption[indexTable];
                }

                switch (tableSwitch)
                {
                    case "Power":
                        tableToEnumerable = _sqLiteConnection.Table<Power>().ToList();
                        break;
                    case "Mastery":
                        tableToEnumerable = _sqLiteConnection.Table<Mastery>().ToList();
                        break;
                    case "User":
                        tableToEnumerable = _sqLiteConnection.Table<User>().ToList();
                        break;
                    case "War":
                        tableToEnumerable = _sqLiteConnection.Table<War>().ToList();
                        break;
                    case "Friends":
                        tableToEnumerable = _sqLiteConnection.Table<Friends>().ToList();
                        break;
                    case "Human":
                        tableToEnumerable = _sqLiteConnection.Table<Human>().ToList();
                        break;
                }
                

                listData = tableToEnumerable.ToList();
                boldHeaderTitle = tableSwitch;

                if (!fromNotification)
                {
                    
                    randLawIndex = rand.Next(listData.Count());
                    LawOrPrinciple = listData[randLawIndex].Law.ToString();
                }
                else
                {
                    
                    randLawIndex = indexTable;
                    LawOrPrinciple = (indexTable + 1).ToString();
                }
                
                HeaderTitle = listData[randLawIndex].Title;
                HeaderDescription = listData[randLawIndex].Description;

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }
}
